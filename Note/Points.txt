.NET Core
https://learn.microsoft.com/en-us/dotnet/core/introduction
. Net architecture framework
https://dotnet.microsoft.com/en-us/learn/dotnet/what-is-dotnet-framework
Data types
Statements and methods
Properties 
Access Modifier
Abstract //pen
Structure //pen
Enumerations //pen
Exception handling //pen
OOP  //sealed //D:\Msc_ICT\Sem2\C#\Youtube_StoreProceduce_LINQ\ConsoleAppOOPsC#

//jan 28
Collection //pen

https://learn.microsoft.com/en-us/dotnet/api/system.collections?view=net-8.0
https://learn.microsoft.com/en-us/dotnet/api/system.collections.arraylist?view=net-8.0
https://learn.microsoft.com/en-us/dotnet/api/system.collections.stack?view=net-8.0
https://learn.microsoft.com/en-us/dotnet/api/system.collections.queue?view=net-8.0
D:\Msc_ICT\Sem2\C#\ICT2_72\ConsoleStudentApp\StudnetCollection.cs
Indexers //pen //D:\Msc_ICT\Sem2\C#\WebAPI\InernalExamRelate\ConsoleAppTupleDelegateOopsConcepts\EmployeeIndexer.cs
Delegates //pen //D:\Msc_ICT\Sem2\C#\WebAPI\InernalExamRelate\ConsoleAppTupleDelegateOopsConcepts\GenericExample.cs
Events //pen
Static //pen
IO namespace //pen
Threads //pen
Generics //pen //D:\Msc_ICT\Sem2\C#\Console\ConsoleApp1\StudnetCollection.cs
https://learn.microsoft.com/en-us/dotnet/standard/generics/
https://learn.microsoft.com/en-us/dotnet/standard/generics/
https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/types/generics
https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/generics/generic-classes
Local Function //pen
LINQ
MVC architecture
Basic related to API

//4 mar
IEnumerable
IEnumerator
D:\Msc_ICT\Sem2\C#\WebAPI\InernalExamRelate\ConsoleAppTupleDelegateOopsConcepts\Employee.cs

//Mar 11
.Expression-bodied members (C# programming guide) //pen
//D:\Msc_ICT\Sem2\C#\WebAPI\InernalExamRelate\ConsoleAppTupleDelegateOopsConcepts\Program.cs
https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/expression-bodied-members

//Mar 13
Anonymous types //InernalExamRelate //D:\Msc_ICT\Sem2\C#\WebAPI\InernalExamRelate\ConsoleAppTupleDelegateOopsConcepts\Program.cs
//new key word is use
//most of the linq query is use ( select new{} )
https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/types/anonymous-types

Tuple types (C# reference) //WebApplicationIdentityTupleDynamicPoly
https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/value-tuples

Introduction to record types in C# //pen
https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/types/records

//Mar 18
Working with HTML Forms in ASP.NET Web Pages (Razor) Sites 
https://learn.microsoft.com/en-us/aspnet/web-pages/overview/ui-layouts-and-themes/4-working-with-forms

//Mar 19 Logger
Dependency injection in ASP.NET Core //pen Que34 Logger
https://learn.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-9.0

Architectural principles
https://learn.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/architectural-principles#dependency-inversion
//Mar 22
Introduction to Identity on ASP.NET Core //pen
https://learn.microsoft.com/en-us/aspnet/core/security/authentication/identity?view=aspnetcore-9.0&tabs=visual-studio

//Mar 27 JoinOp
Join Operations in LINQ //JoinOp file
dictionary linq query //D:\Msc_ICT\Sem2\C#\WebAPI\InernalExamRelate\ConsoleAppTupleDelegateOopsConcepts\Program.cs
https://learn.microsoft.com/en-us/dotnet/csharp/linq/standard-query-operators/join-operations

C# Dictionary
C# Queue
C# Stack
C# List
C# Arrays
C# HashTable
C# StringCollection
C# ArrayList
C# HashSet
C# LinkedList

===========================================================
==> Constratcor
	static const
	public const

==> variable of class
	instance of class
	reference of class

==> access modifiers
	private
	protected
	public
	internal
	internal protected

==>Inheritance
1.Parent class constructor must be accessible to child class or else inheritance will not be possible 
2.inheritance child classes can access parent classes members but a parent class can never access its child class number
3.we can intialize the parent class variable by using its child class instance 

1.single
2.multi level
3.Hierarchical
4.Hybrid(multi level +Hierarchical)
5.multiple 

Static Polymorohism / Compile time Polymorohism / Method OverLoading / method name same diffrente signature (multiplexi)

Dynamic Polymorohism / Run-Time Polymorohism / Method Overriding / IS-A Relationship (parent child)

==>Method Overloading
	it's approches to implement multiple  method having same name but diffrent paramenter type it's called overloading

==> Method Overriding
	it's approch of re-implementing a parent classs method under the clid class with same signature.

	ex:-
	class1
	Test()

	class2 :class1
	Test()

	ex:- //Any virtual method of the parent class can be overriden by the child class
			//if required by using the override modifier
	 class1{
		 public virtual void Test() // overridable
	 }
	
	class2 :class1{
	 public override void Test() //overriding
	}

==> method hiding / Shadowing
		